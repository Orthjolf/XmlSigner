package com.integriks.smev.signUtils;

/**
 * SmevSigner.java
 * https://rm.mfc.ru/issues/9182, Разработка кода подписания, 13.02.2018, imironov
 */

import com.integriks.smev.nwxRewrite.client.src.clientApi.services.template.Template;
import com.integriks.smev.nwxRewrite.client.src.clientApi.services.template.configuration.GeoTemplateConfiguration;
import com.integriks.smev.nwxRewrite.client.src.factory.Factory;
import com.integriks.smev.nwxRewrite.client.src.serverApi.autogenerated.types.*;
import com.integriks.smev.nwxRewrite.client.src.toolset.commons.ToolConfiguration;

import org.springframework.util.xml.DomUtils;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMResult;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathFactory;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

/**
 * Для формирования подписанного запроса для СМЭВ.
 */
public class SmevSigner {

    /**
     * Получает запрос без подписи и формирует подписанный запрос для СМЭВ.
     *
     * @param xmlWithoutSign
     * @return - Подписанный ЭП-ОВ запрос SendRequestRequest для СМЭВ.
     * @throws Exception
     */
    public String SignMessage(String xmlWithoutSign) throws Exception {

        GeoTemplateConfiguration geoConfig = ToolConfiguration.getDefault().getGeoTemplateConfiguration();

        Template template = null;
        template = Factory.getTemplateInstance(geoConfig);

        List<File> mtomAttachments = getMtomAttachments(xmlWithoutSign);
        List<File> largeAttachments = getLargeAttachments(xmlWithoutSign);

        String SERVER_API_PACKAGE = "com.integriks.smev.nwxRewrite.client.src.serverApi.autogenerated.types:com.integriks.smev.nwxRewrite.client.src.serverApi.autogenerated.types.basic:com.integriks.smev.nwxRewrite.client.src.serverApi.autogenerated.types.fault";

        TransformerFactory transFactory = TransformerFactory.newInstance();
        Transformer transformer = transFactory.newTransformer();
        StringWriter buffer = new StringWriter();
        transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "false");

        ThreadLocal<JAXBContext> jaxbContext = new ThreadLocal<>();
        if (jaxbContext.get() == null) {
            try {
                jaxbContext.set(JAXBContext.newInstance(SERVER_API_PACKAGE));
            } catch (JAXBException e) {
                throw new RuntimeException(e);
            }
        }

        DOMResult domResult = new DOMResult();

        String requestType = getRequestType(xmlWithoutSign);

        switch (requestType) {
            case "SendRequestRequest": {

                String nodeId = getNodeId(xmlWithoutSign);
                boolean isTestMessage = getTest(xmlWithoutSign);

                SendRequestRequest request = template.getRequestMessage(nodeId, getMessageId(xmlWithoutSign), null, null, null,
                        null, null, fileToElement(getMessagePrimaryContent(xmlWithoutSign)),
                        null, mtomAttachments, largeAttachments, null, isTestMessage);

                jaxbContext.get().createMarshaller().marshal(request, domResult);

                break;
            }
            case "GetIncomingQueueStatisticsRequest": {

                String timestamp = getTimestamp(xmlWithoutSign);
                GetIncomingQueueStatisticsRequest queueStatisticsRequest = template.getIncomingQueueStatistics(null, timestamp);
                jaxbContext.get().createMarshaller().marshal(queueStatisticsRequest, domResult);

                break;
            }
            case "SendResponseRequest":
                String replayToAddress = getReplyAddress(xmlWithoutSign);
                if (isContentMessage(xmlWithoutSign)) {
                    SendResponseRequest sendResponseRequest = template.getSendResponseRequestMessage(getMessageId(xmlWithoutSign), replayToAddress, null,
                            null, fileToElement(getMessagePrimaryContent(xmlWithoutSign)),
                            null, mtomAttachments, largeAttachments, null);
                    jaxbContext.get().createMarshaller().marshal(sendResponseRequest, domResult);
                } else if (isStatusMessage(xmlWithoutSign)) {
                    int code = getStatusCode(xmlWithoutSign);
                    String description = getStatusDescription(xmlWithoutSign);
                    SendResponseRequest sendResponseRequest = template.getStatusResponseMessage(getMessageId(xmlWithoutSign), replayToAddress, null, code, description, null, null);
                    jaxbContext.get().createMarshaller().marshal(sendResponseRequest, domResult);
                } else if (isRejectMessage(xmlWithoutSign)) {
                    String code = getRejectionReasonCode(xmlWithoutSign);
                    String description = getRejectionReasonDescription(xmlWithoutSign);
                    SendResponseRequest sendResponseRequest = template.getRejectResponseMessage(getMessageId(xmlWithoutSign), replayToAddress, null, code, description, null);
                    jaxbContext.get().createMarshaller().marshal(sendResponseRequest, domResult);
                }
                break;
            case "GetResponseRequest": {

                String timestamp = getTimestamp(xmlWithoutSign);
                String nodeId = getNodeId(xmlWithoutSign);
                GetResponseRequest responseRequest = template.getResponseMessage(null, nodeId, timestamp);
                jaxbContext.get().createMarshaller().marshal(responseRequest, domResult);

                break;
            }
            case "GetRequestRequest": {

                String timestamp = getTimestamp(xmlWithoutSign);
                String nodeId = getNodeId(xmlWithoutSign);
                GetRequestRequest requestRequest = template.getRequestRequest(null, nodeId, timestamp);
                jaxbContext.get().createMarshaller().marshal(requestRequest, domResult);

                break;
            }
            case "AckRequest":

                String targetMessageId = getTargetMessageId(xmlWithoutSign);
                AckRequest ackRequest = template.getAckRequest(targetMessageId);
                jaxbContext.get().createMarshaller().marshal(ackRequest, domResult);

                break;
            case "GetStatusRequest": {

                String timestamp = getTimestamp(xmlWithoutSign);
                GetStatusRequest statusRequest = template.getStatusRequest(timestamp);
                jaxbContext.get().createMarshaller().marshal(statusRequest, domResult);

                break;
            }
        }

        transformer.transform(new DOMSource(((Document) domResult.getNode()).getDocumentElement()),
                new StreamResult(buffer));

        return buffer.toString();
    }

    private String getRejectionReasonDescription(String xml) throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setIgnoringElementContentWhitespace(true);

        DocumentBuilder builder = factory.newDocumentBuilder();
        InputSource is = new InputSource(new StringReader(xml));
        Document document = builder.parse(is);

        return document.getElementsByTagName("RejectionReasonDescription").item(0).getTextContent();
    }

    private String getRejectionReasonCode(String xml) throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setIgnoringElementContentWhitespace(true);

        DocumentBuilder builder = factory.newDocumentBuilder();
        InputSource is = new InputSource(new StringReader(xml));
        Document document = builder.parse(is);

        return document.getElementsByTagName("RejectionReasonCode").item(0).getTextContent();
    }

    private String getStatusDescription(String xml) throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setIgnoringElementContentWhitespace(true);

        DocumentBuilder builder = factory.newDocumentBuilder();
        InputSource is = new InputSource(new StringReader(xml));
        Document document = builder.parse(is);

        return document.getElementsByTagName("StatusDescription").item(0).getTextContent();
    }

    private int getStatusCode(String xml) throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setIgnoringElementContentWhitespace(true);

        DocumentBuilder builder = factory.newDocumentBuilder();
        InputSource is = new InputSource(new StringReader(xml));
        Document document = builder.parse(is);

        return Integer.parseInt(document.getElementsByTagName("StatusCode").item(0).getTextContent());
    }

    private String getReplyAddress(String xml) throws Exception {

        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setIgnoringElementContentWhitespace(true);

        DocumentBuilder builder = factory.newDocumentBuilder();
        InputSource is = new InputSource(new StringReader(xml));
        Document document = builder.parse(is);

        return document.getElementsByTagName("To").item(0).getTextContent();
    }

    private boolean getTest(String xml) throws Exception {

        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setIgnoringElementContentWhitespace(true);

        DocumentBuilder builder = factory.newDocumentBuilder();
        InputSource is = new InputSource(new StringReader(xml));
        Document document = builder.parse(is);

        return document.getElementsByTagName("TestMessage").getLength() > 0;
    }

    private boolean isStatusMessage(String xml) throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setIgnoringElementContentWhitespace(true);

        DocumentBuilder builder = factory.newDocumentBuilder();
        InputSource is = new InputSource(new StringReader(xml));
        Document document = builder.parse(is);

        return document.getElementsByTagName("RequestStatus").getLength() > 0;
    }

    private boolean isRejectMessage(String xml) throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setIgnoringElementContentWhitespace(true);

        DocumentBuilder builder = factory.newDocumentBuilder();
        InputSource is = new InputSource(new StringReader(xml));
        Document document = builder.parse(is);

        return document.getElementsByTagName("RequestRejected").getLength() > 0;
    }

    private boolean isContentMessage(String xml) throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setIgnoringElementContentWhitespace(true);

        DocumentBuilder builder = factory.newDocumentBuilder();
        InputSource is = new InputSource(new StringReader(xml));
        Document document = builder.parse(is);

        return document.getElementsByTagName("MessagePrimaryContent").getLength() > 0;
    }

    private String getTimestamp(String xml) throws Exception {

        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setIgnoringElementContentWhitespace(true);

        DocumentBuilder builder = factory.newDocumentBuilder();
        InputSource is = new InputSource(new StringReader(xml));
        Document document = builder.parse(is);

        return document.getElementsByTagName("Timestamp").item(0).getTextContent();
    }

    private String getNodeId(String xml) throws Exception {

        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setIgnoringElementContentWhitespace(true);

        DocumentBuilder builder = factory.newDocumentBuilder();
        InputSource is = new InputSource(new StringReader(xml));
        Document document = builder.parse(is);

        Node node = document.getElementsByTagName("NodeID").item(0);
        if (node != null)
            return node.getTextContent();
        else
            return null;
    }

    private String getTargetMessageId(String xml) throws Exception {

        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setIgnoringElementContentWhitespace(true);

        DocumentBuilder builder = factory.newDocumentBuilder();
        InputSource is = new InputSource(new StringReader(xml));
        Document document = builder.parse(is);

        return document.getElementsByTagName("AckTargetMessage").item(0).getTextContent();
    }

    /**
     * @param xml
     * @return
     * @throws Exception
     */
    private String getRequestType(String xml) throws Exception {

        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setIgnoringElementContentWhitespace(true);

        DocumentBuilder builder = factory.newDocumentBuilder();
        InputSource is = new InputSource(new StringReader(xml));
        Document document = builder.parse(is);

        XPath xpath = XPathFactory.newInstance().newXPath();
        Node node = (Node) xpath.evaluate("//*[@Id='SIGNED_BY_CALLER']", document, XPathConstants.NODE);

        return node.getParentNode().getNodeName();
    }

    /**
     * Метод для получения MessageID из входящего запроса
     *
     * @param xml - входящий запрос
     * @return - Содержимое тега MessageID
     * @throws Exception
     */
    private String getMessageId(String xml) throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setIgnoringElementContentWhitespace(true);

        DocumentBuilder builder = factory.newDocumentBuilder();
        InputSource is = new InputSource(new StringReader(xml));
        Document document = builder.parse(is);

        Node messageID = document.getElementsByTagName("MessageID").item(0);
        if (messageID != null)
            return messageID.getTextContent();
        else
            return null;
    }

    /**
     * Метод для получения содержимого тега MessagePrimaryContent из входящего запроса
     *
     * @param xml - входящий запрос
     * @return - Содержимое тега MessagePrimaryContent
     * @throws Exception
     */
    private String getMessagePrimaryContent(String xml) throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setIgnoringElementContentWhitespace(true);

        DocumentBuilder builder = factory.newDocumentBuilder();
        InputSource is = new InputSource(new StringReader(xml));
        Document document = builder.parse(is);

        NodeList messagePrimaryContent = document.getElementsByTagName("MessagePrimaryContent");
        Element message = (Element) messagePrimaryContent.item(0);

//        return nodeToString(DomUtils.getFirstChildElement(message));
        return nodeToString(DomUtils.getChildElements(message).get(0));
    }

    /**
     * Метод для получения файлов, переданных в теле запроса
     *
     * @param xml - входящий запрос
     * @return
     * @throws Exception
     */
    private List<File> getMtomAttachments(String xml) throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setIgnoringElementContentWhitespace(true);

        DocumentBuilder builder = factory.newDocumentBuilder();
        InputSource is = new InputSource(new StringReader(xml));
        Document document = builder.parse(is);

        NodeList attachmentHeaderList = document.getElementsByTagName("AttachmentHeader");
        NodeList attachmentContentList = document.getElementsByTagName("AttachmentContent");

        List<File> attachments = new LinkedList<File>();

        for (int i = 0; i < attachmentContentList.getLength(); i++) {
            Node attachmentContent = attachmentContentList.item(i);

            if (attachmentContent instanceof Element) {
                Element docElement = (Element) attachmentContent;

                Node id = docElement.getElementsByTagName("Id").item(0);
                Node content = docElement.getElementsByTagName("Content").item(0);

                String fileName = id.getTextContent();

                File targetFile = new File(fileName);
                targetFile.createNewFile();

                Writer targetFileWriter = new FileWriter(targetFile);

                byte[] bytes = Base64.getDecoder().decode(content.getTextContent().getBytes(StandardCharsets.UTF_8));

                targetFileWriter.write(new String(bytes));
                targetFileWriter.close();

                attachments.add(targetFile);
            }
        }

        return attachments;
    }

    /**
     * @param xml
     * @return
     * @throws Exception
     */
    private List<File> getLargeAttachments(String xml) throws Exception {
        return Collections.emptyList();
    }

    /**
     * @param node
     * @return
     * @throws Exception
     */
    private String nodeToString(Node node) throws Exception {
        StringWriter sw = new StringWriter();

        Transformer t = TransformerFactory.newInstance().newTransformer();
        t.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
        t.transform(new DOMSource(node), new StreamResult(sw));

        return sw.toString();
    }

    /**
     * Парсит XML файл и возвращает корневой элемент
     *
     * @param fileXml файл с xml документом
     * @return корневой элемент документа
     * @throws IOException                  в случае ошибки чтения входного файла
     * @throws ParserConfigurationException в случае ошибки создания xml парсера
     * @throws SAXException                 в случае невалидного xml кода
     */
    private static Element fileToElement(String fileXml) throws IOException, ParserConfigurationException, SAXException {
        if (fileXml == null) {
            return null;
        }
        try (InputStream inputStream = new ByteArrayInputStream(fileXml.getBytes(StandardCharsets.UTF_8))) {
            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
            documentBuilderFactory.setNamespaceAware(true);
            documentBuilderFactory.setCoalescing(true);
            documentBuilderFactory.setIgnoringElementContentWhitespace(true);
            return documentBuilderFactory.newDocumentBuilder().parse(inputStream).getDocumentElement();
        }
    }
}
