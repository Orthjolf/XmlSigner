package com.integriks.smev.nwxRewrite.client.src.clientApi.services.template;

import org.w3c.dom.Element;
import com.integriks.smev.nwxRewrite.client.src.clientApi.types.exception.SMEVException;
import com.integriks.smev.nwxRewrite.client.src.clientApi.types.message.SMEVMessage;
import com.integriks.smev.nwxRewrite.client.src.clientApi.types.message.system.SMEVMetadata;
import com.integriks.smev.nwxRewrite.client.src.serverApi.autogenerated.types.*;

import javax.xml.namespace.QName;
import java.io.File;
import java.util.Date;
import java.util.List;
import java.util.Map;


/**
 * Шаблон взаимодействия со СМЭВ. Является надстройкой над {@code WSTemplate}, но использует простые типы данных,
 * которые транслируются в объекты клиентского API.
 */
public interface Template {

    /**
     * Отправляет сообщение-запрос в СМЭВ
     *
     * @param nodeId             идентификатор узла СМЭВ
     * @param messageId          идентификатор сообщения
     * @param transactionCode    код транзакции
     * @param originalMessageId  идентификатор сообщения, в ответ на которое отсылается текущее
     * @param referenceMessageId идентификатор изначального сообщения
     * @param bpm                любые бизнес-метаданные
     * @param eol                дата и время, до которого необходимо обработать сообщение
     * @param content            содержимое сообщения
     * @param personalSignature  персональная подпись
     * @param mtomAttachments    список внутренних вложений
     * @param largeAttachments   список больших вложений, передаваемых через FTP
     * @param extendedProps      дополнительные параметры отсылки
     * @param testMessage        true для тестовых сообщений
     * @return метаданные отправленного сообщения
     * @throws SMEVException в случае любой ошибки
     */
    SMEVMetadata sendRequestMessage(String nodeId,
                                    String messageId,
                                    String transactionCode,
                                    String originalMessageId,
                                    String referenceMessageId, List<Element> bpm,
                                    Date eol,
                                    Element content, Element personalSignature,
                                    List<File> mtomAttachments,
                                    List<File> largeAttachments, Map<String, String> extendedProps,
                                    boolean testMessage) throws SMEVException;

    /**
     * Подписывает сообщение-запрос в СМЭВ
     * https://rm.mfc.ru/issues/9182, Разработка кода подписания, 13.02.2018, imironov
     *
     * @param nodeId             идентификатор узла СМЭВ
     * @param messageId          идентификатор сообщения
     * @param transactionCode    код транзакции
     * @param originalMessageId  идентификатор сообщения, в ответ на которое отсылается текущее
     * @param referenceMessageId идентификатор изначального сообщения
     * @param bpm                любые бизнес-метаданные
     * @param eol                дата и время, до которого необходимо обработать сообщение
     * @param content            содержимое сообщения
     * @param personalSignature  персональная подпись
     * @param mtomAttachments    список внутренних вложений
     * @param largeAttachments   список больших вложений, передаваемых через FTP
     * @param extendedProps      дополнительные параметры отсылки
     * @param testMessage        true для тестовых сообщений
     * @return объект запроса с подписью
     * @throws SMEVException в случае любой ошибки
     */
    SendRequestRequest getRequestMessage(String nodeId,
                                         String messageId,
                                         String transactionCode,
                                         String originalMessageId,
                                         String referenceMessageId, List<Element> bpm,
                                         Date eol,
                                         Element content, Element personalSignature,
                                         List<File> mtomAttachments,
                                         List<File> largeAttachments, Map<String, String> extendedProps,
                                         boolean testMessage) throws SMEVException;
    /**
     * Отправляет сообщение-ответ в СМЭВ
     *
     * @param messageId         идентификатор сообщения
     * @param replyToAddress    адрес отправителя запроса, в ответ на который отправляется текущее сообщение
     * @param originalMessageId идентификатор сообщения, в ответ на которое отсылается текущее
     * @param bpm               любые бизнес-метаданные
     * @param content           содержимое сообщения
     * @param personalSignature персональная подпись
     * @param mtomAttachments   список внутренних вложений
     * @param largeAttachments  список больших вложений, передаваемых через FTP
     * @param extendedProps     дополнительные параметры отсылки
     * @return метаданные отправленного сообщения
     * @throws SMEVException в случае любой ошибки
     */
    SMEVMetadata sendResponseMessage(
            String messageId,
            String replyToAddress,
            String originalMessageId,
            List<Element> bpm,
            Element content, Element personalSignature,
            List<File> mtomAttachments,
            List<File> largeAttachments, Map<String, String> extendedProps) throws SMEVException;


    /**
     * Подписывает сообщение-ответ в СМЭВ
     *
     * @param messageId         идентификатор сообщения
     * @param replyToAddress    адрес отправителя запроса, в ответ на который отправляется текущее сообщение
     * @param originalMessageId идентификатор сообщения, в ответ на которое отсылается текущее
     * @param bpm               любые бизнес-метаданные
     * @param content           содержимое сообщения
     * @param personalSignature персональная подпись
     * @param mtomAttachments   список внутренних вложений
     * @param largeAttachments  список больших вложений, передаваемых через FTP
     * @param extendedProps     дополнительные параметры отсылки
     * @return метаданные отправленного сообщения
     * @throws SMEVException в случае любой ошибки
     */
    SendResponseRequest getSendResponseRequestMessage(
            String messageId,
            String replyToAddress,
            String originalMessageId,
            List<Element> bpm,
            Element content, Element personalSignature,
            List<File> mtomAttachments,
            List<File> largeAttachments, Map<String, String> extendedProps) throws SMEVException;

    /**
     * Отправляет отказ на обработку сообщения-запроса
     *
     * @param messageId         идентификатор сообщения
     * @param replyToAddress    адрес отправителя запроса, в ответ на который отправляется текущее сообщение
     * @param originalMessageId идентификатор сообщения, в ответ на которое отсылается текущее
     * @param code              код причины отказа в обработке
     * @param description       описание причины отказа в обработке
     * @param bpm               любые бизнес-метаданные
     * @return метаданные отправленного сообщения
     * @throws SMEVException в случае любой ошибки
     */
    SMEVMetadata sendRejectResponseMessage(String messageId,
                                           String replyToAddress,
                                           String originalMessageId,
                                           String code, String description, List<Element> bpm) throws SMEVException;


    /**
     *
     */
    SendResponseRequest getRejectResponseMessage(String messageId,
                                           String replyToAddress,
                                           String originalMessageId,
                                           String code, String description, List<Element> bpm) throws SMEVException;

    /**
     * Отправляет статус обработки сообщения-запроса
     *
     * @param messageId         идентификатор сообщения
     * @param replyToAddress    адрес отправителя запроса, в ответ на который отправляется текущее сообщение
     * @param originalMessageId идентификатор сообщения, в ответ на которое отсылается текущее
     * @param code              код статуса
     * @param description       описание статуса
     * @param map               дополнительные параметры
     * @param bpm               любые бизнес-метаданные
     * @return метаданные отправленного сообщения
     * @throws SMEVException в случае любой ошибки
     */
    SMEVMetadata sendStatusResponseMessage(String messageId,
                                           String replyToAddress,
                                           String originalMessageId,
                                           int code, String description, Map<String, String> map, List<Element> bpm
    ) throws SMEVException;


    SendResponseRequest getStatusResponseMessage(String messageId,
                                           String replyToAddress,
                                           String originalMessageId,
                                           int code, String description, Map<String, String> map, List<Element> bpm
    ) throws SMEVException;

    /**
     * Получает сообщение-запрос
     *
     * @param requestTypeSelector фильтр для сообщений-запросов
     * @param nodeId              идентификатор узла СМЭВ
     * @return полученный запрос
     * @throws SMEVException в случае любой ошибки
     */
    SMEVMessage getRequestMessage(QName requestTypeSelector, String nodeId) throws SMEVException;

    /**
     * Получает сообщение о статусе
     *
     * @param requestTypeSelector фильтр входящих сообщений
     * @param nodeId              идентификатор узла СМЭВ
     * @return полученное сообщение со статусом
     * @throws SMEVException в случае любой ошибки
     */
    SMEVMessage getStatusMessage(QName requestTypeSelector, String nodeId) throws SMEVException;


    /**
     */
    GetStatusRequest getStatusRequest(String timestamp) throws Exception;


    /**
     * Получает сообщение-ответ
     *
     * @param requestTypeSelector фильтр входящих сообщений
     * @param nodeId              идентификатор узла СМЭВ
     * @return полученное сообщение-ответ
     * @throws SMEVException в случае любой ошибки
     */
    SMEVMessage getResponseMessage(QName requestTypeSelector, String nodeId) throws SMEVException;

    /**
     * https://rm.mfc.ru/issues/10780
     * danilov
     *
     * @param requestTypeSelector фильтр входящих сообщений
     * @param nodeId              идентификатор узла СМЭВ
     * @param timestamp
     * @return полученное сообщение-ответ
     * @throws SMEVException в случае любой ошибки
     */
    GetResponseRequest getResponseMessage(QName requestTypeSelector, String nodeId, String timestamp) throws Exception;

    /**
     * https://rm.mfc.ru/issues/12564
     * danilov
     */
    GetRequestRequest getRequestRequest(QName requestTypeSelector, String nodeId, String timestamp) throws Exception;

    /**
     * https://rm.mfc.ru/issues/10780
     * danilov
     */
    AckRequest getAckRequest(String messageId) throws SMEVException;

    /**
     * https://rm.mfc.ru/issues/10780
     * danilov
     *
     * @param messageId идентификатор полученного сообщений
     * @throws SMEVException в случае любой ошибки
     */
    void ack(String messageId) throws SMEVException;

    /**
     * Получает статистику по JMS-очередям текущего клиента
     *
     * @param nodeId идентификатор узла СМЭВ
     * @return количество сообщений в каждой очереди
     * @throws SMEVException в случае любой ошибки
     */
    Map<String, Long> getIncomingQueueStatistics(String nodeId) throws SMEVException;

    /**
     * Получает статистику по JMS-очередям текущего клиента
     *
     * @param nodeId идентификатор узла СМЭВ
     * @param timestamp - ?
     * @return количество сообщений в каждой очереди
     * @throws SMEVException в случае любой ошибки
     */
    GetIncomingQueueStatisticsRequest getIncomingQueueStatistics(String nodeId, String timestamp) throws Exception;
}
